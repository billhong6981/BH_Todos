#!/usr/bin/python3
"""
Flask route that returns json status response
"""
from api.v1.views import app_views
from flask import abort, jsonify, request
from models import storage, CNC
from os import environ
STORAGE_TYPE = environ.get('HBNB_TYPE_STORAGE')


@app_views.route('/employees/', methods=['GET'])
def employees_no_id(employee_id=None):
    if request.method == 'GET':
        employee_all = storage.all('Employee')
        result = [obj.to_json() for obj in employee_all.values()]
        return jsonify(result)

@app_views.route('/departments/<department_id>/employees', methods=['GET', 'POST'])
def employees_per_department(department_id=None):
    """
    employees route to handle http method for requested employees by department
    """
    department_obj = storage.get('Department', department_id)
    if department_obj is None:
        abort(404, 'Not found')

    if request.method == 'GET':
        all_employees = storage.all('Employee')
        department_employees = [obj.to_json() for obj in all_employees.values()
                       if obj.department_id == department_id]
        return jsonify(department_employees)

    if request.method == 'POST':
        req_json = request.get_json()
        if req_json is None:
            abort(400, 'Not a JSON')

        department_id = req_json.get("department_id")
        if department_id is None:
            abort(400, 'Missing department_id')
        department_obj = storage.get('Department', department_id)
        if department_obj is None:
            abort(404, 'Not found Department')
        if req_json.get("first_name") is None:
            abort(400, 'Missing first_name')
        if req_json.get("last_name") is None:
            abort(400, 'Missing last_name')
        if req_json.get("email") is None:
            abort(400, 'Missing email')

        Employee = CNC.get("Employee")
        new_object = Employee(**req_json)
        new_object.save()
        return jsonify(new_object.to_json()), 201


@app_views.route('/employees/<employee_id>', methods=['GET', 'DELETE', 'PUT'])
def employees_with_id(employee_id=None):
    """
    employees route to handle http methods for given employee
    """
    employee_obj = storage.get('Employee', employee_id)
    if employee_obj is None:
        abort(404, 'Not found')

    if request.method == 'GET':
        return jsonify(employee_obj.to_json())

    if request.method == 'DELETE':
        employee_obj.delete()
        del employee_obj
        return jsonify({}), 200

    if request.method == 'PUT':
        req_json = request.get_json()
        if req_json is None:
            abort(400, 'Not a JSON')
        employee_obj.bm_update(req_json)
        return jsonify(employee_obj.to_json()), 200


@app_views.route('/employees_search', methods=['POST'])
def employees_search():
    """
    employees route to handle http method for request to search employees
    """
    all_employees = [e for e in storage.all('Employee').values()]
    req_json = request.get_json()
    if req_json is None:
        abort(400, 'Not a JSON')
    departments = req_json.get('departments')
    if departments and len(departments) > 0:
        department_employees = set([employee.id for employee in all_employees
                                    if employee.department_id in departments])
    else:
        department_employees = set()
    employees = req_json.get('employees')
    if employees and len(employees) > 0:
        employees = set([
            e_id for e_id in employees if storage.get('Employee', e_id)])
        department_employees = department_employees.union(employees)

    if len(department_employees) > 0:
        all_employees = [e for e in all_employees if e.id in department_employees]
        worker_todo = [worker.todos for worker in all_employees]

        result1 = [employee.to_json() for employee in all_employees]
        result2 = [todo.to_json() for todo in worker_todo]
        result = [jsonify(result1), jsonify(result2)]
        return result
